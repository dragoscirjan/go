include Makefile.mod.include

## Add your make instructions here

PROJECT_PREFIX=github.com/templ-project
PROJECT=go

# https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
BUILD_OS = linux
BUILD_ARCH = amd64
BUILD_VERSION = $(shell git for-each-ref refs/tags --sort=-taggerdate --format='%%(refname)' --count=1)
ifeq ($(BUILD_VERSION),)
BUILD_VERSION=none
endif

BUILD_PATH = ./dist/$(BUILD_OS)/$(BUILD_ARCH)
BUILD_VARS = GOOS=$(BUILD_OS) GOARCH=$(BUILD_ARCH)
BUILD_SRC = ./main.go
BUILD_BIN = $(BUILD_PATH)/main
ifeq ($(OSFLAG),WIN32)
BUILD_COMMIT = $(shell $(POWERSHELL) -Command 'git log --format="%h" -n 1')
BUILD_DATE = $(shell $(POWERSHELL) -Command 'Get-Date -Format "yyyyMMddHHmmss"')
else
BUILD_COMMIT = $(shell git log --format="%h" -n 1)
BUILD_DATE = $(shell date --utc)
endif

ifeq ($(BUILD_OS),windows)
	BUILD_EXT = .exe
else
	BUILD_EXT =
endif

BUILD_VERSION_FLAG = $(PROJECT_PREFIX)/$(PROJECT)/src.VersionName=$(BUILD_VERSION)
BUILD_COMMIT_FLAG = $(PROJECT_PREFIX)/$(PROJECT)/src.GitCommit=$(BUILD_COMMIT)
BUILD_DATE_FLAG = $(PROJECT_PREFIX)/$(PROJECT)/src.BuildDate=$(BUILD_DATE)

GO := GOOS=$(BUILD_OS) GOARCH=$(BUILD_ARCH) go build -trimpath
GO_LDFLAGS = -X $(BUILD_VERSION_FLAG) -X $(BUILD_COMMIT_FLAG) -X '$(BUILD_DATE_FLAG)'

#
# Instructions
#

build: test clean build-$(SHELL_IS) ## Build Application BUILD_OS=? BUILD_ARCH=? #$(BUILD_SRC) (usabled only in app mode)

build-run:
	$(GO) -ldflags "$(GO_LDFLAGS)" -o $(BUILD_BIN)$(BUILD_EXT) $(BUILD_SRC)

build-bash: build-bash-mkdir build-run

build-bash-mkdir:
	mkdir -p dist/$(BUILD_OS)/$(BUILD_ARCH)

build-powershell: GO = $(POWERSHELL) -File ./.scripts/make.ps1 -Action Build -Command "go build -trimpath" -GoOs $(BUILD_OS) -GoArch $(BUILD_ARCH)
build-powershell: BUILD_SRC = -Src ./main.go
build-powershell: build-powershell-mkdir build-run

build-powershell-mkdir:
	$(POWERSHELL) -File ./.scripts/make.ps1 -Action MkDir -Path dist\$(BUILD_OS)\$(BUILD_ARCH)

CLEAN_FULL=
clean: clean-$(SHELL_IS) ## Clean all dist/temp folders

clean-bash: # TODO clean temporary /tmp/go-* smth...
ifneq ($(wildcard ./src/.*),)
ifneq ($(CLEAN_FULL),)
	rm -rf ./dist
else
	rm -rf $(BUILD_PATH)
endif
endif

clean-powershell: # TODO clean temporary APPDATA/go-* smth...
ifneq ($(wildcard ./src/.*),)
ifneq ($(CLEAN_FULL),)
	$(POWERSHELL) -File ./.scripts/make.ps1 -Action RmDir -Path .\dist
else
	$(POWERSHELL) -File ./.scripts/make.ps1 -Action RmDir -Path $(BUILD_PATH)
endif
endif


install: ## Install Application
	@echo 'Install Instructions'


RUN_ARGS  =
run: run-$(SHELL_IS) ## Run Application (from source code) (usabled only in app mode)

run-bash:
	go run ./main.go $(RUN_ARGS)

run-powershell:
	go run .\main.go $(RUN_ARGS)


run-binary: build ## Run Application (from binary) (usabled only in app mode)
  run-binary-$(SHELL_IS) BUILD_OS=$(BUILD_OS) BUILD_ARCH=$(BUILD_ARCH) RUN_ARGS=$(RUN_ARGS)

run-binary-bash:
	./dist/$(BUILD_OS)/$(BUILD_ARCH)/main $(RUN_ARGS)

run-binary-powershell:
	.\dist\$(BUILD_OS)\$(BUILD_ARCH)\main.exe $(RUN_ARGS)


uninstall: ## Uninstall Application
	@echo 'Uninstall Instructions'
